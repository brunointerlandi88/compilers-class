/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
    return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
    return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
    String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
                 ": parse error at or near ");
        Utilities.printToken(cur_token);
    omerrs++;
    if (omerrs>50) {
       System.err.println("More than 50 errors");
       System.exit(1);
    }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal attr attribute;
nonterminal method method;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expression function_call, typed_receiver_call, receiver_call, self_call;
nonterminal Expressions argument_list;
nonterminal let let_expression, let_prelude;
nonterminal Expression let_followon;
nonterminal typcase case_expression;
nonterminal Cases case_list;
nonterminal branch case_clause;
nonterminal Expressions expression_list;
nonterminal Expression expression;

/* Precedence declarations go here. */
precedence nonassoc ASSIGN;
precedence nonassoc NOT;
precedence nonassoc LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence nonassoc ISVOID;
precedence nonassoc NEG;
precedence nonassoc AT;
precedence nonassoc DOT;

program    
    ::= class_list:cl
        {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
    ::= class:c
        {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
    | class_list:cl class:c
        {: RESULT = cl.appendElement(c); :}
    ;

class
    ::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), f, curr_filename()); :}
    | CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
    | CLASS TYPEID:n error SEMI
    | CLASS TYPEID:n INHERITS TYPEID:p error SEMI
    ;

feature_list
    ::= /* empty */
        {: RESULT = new Features(curr_lineno()); :}
    | feature_list:fl feature:f
        {: RESULT = fl.appendElement(f); :}
    ;

feature
    ::= method:m SEMI
        {: RESULT = m; :}
    | attribute:a SEMI
        {: RESULT = a; :}
    | error SEMI
    ;

method
    ::= OBJECTID:name LPAREN formal_list:formals RPAREN COLON TYPEID:return_type LBRACE expression:expr RBRACE
        {: RESULT = new method(curr_lineno(), name, formals, return_type, expr); :}
    ;

formal_list
    ::= /* empty */
        {: RESULT = new Formals(curr_lineno()); :}
    | formal:f
        {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
    | formal_list:fl COMMA formal:f
        {: RESULT = fl.appendElement(f); :}
    ;

formal
    ::= OBJECTID:name COLON TYPEID:type_decl
        {: RESULT = new formalc(curr_lineno(), name, type_decl); :}
    ;

attribute
    ::= OBJECTID:name COLON TYPEID:type_decl ASSIGN expression:init
        {: RESULT = new attr(curr_lineno(), name, type_decl, init); :}
    | OBJECTID:name COLON TYPEID:type_decl
        {: RESULT = new attr(curr_lineno(), name, type_decl, new no_expr(curr_lineno())); :}
    ;

function_call
    ::= typed_receiver_call:call
        {: RESULT = call; :}
    | receiver_call:call
        {: RESULT = call; :}
    | self_call:call
        {: RESULT = call; :}
    ;

typed_receiver_call
    ::= expression:expr AT TYPEID:type_name DOT OBJECTID:name LPAREN argument_list:actual RPAREN
        {: RESULT = new static_dispatch(curr_lineno(), expr, type_name, name, actual); :}
    ;

receiver_call
    ::= expression:expr DOT OBJECTID:name LPAREN argument_list:actual RPAREN
        {: RESULT = new dispatch(curr_lineno(), expr, name, actual); :}
    ;

self_call
    ::= OBJECTID:name LPAREN argument_list:actual RPAREN
        {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), name, actual); :}
    ;

argument_list
    ::= /* empty */
        {: RESULT = new Expressions(curr_lineno()); :}
    | expression:a
        {: RESULT = (new Expressions(curr_lineno())).appendElement(a); :}
    | argument_list:al COMMA expression:a
        {: RESULT = al.appendElement(a); :}
    ;

let_expression
    ::= LET let_prelude:expr
        {: RESULT = expr; :}
    ;

let_prelude
    ::= OBJECTID:identifier COLON TYPEID:type_decl ASSIGN expression:init let_followon:body
        {: RESULT = new let(curr_lineno(), identifier, type_decl, init, body); :}
    
    | OBJECTID:identifier COLON TYPEID:type_decl let_followon:body
        {: RESULT = new let(curr_lineno(), identifier, type_decl, new no_expr(curr_lineno()), body); :}
    ;

let_followon
    ::= IN expression:body
        {: RESULT = body; :}
    | COMMA let_prelude:body
        {: RESULT = body; :}
    ;

case_expression
    ::= CASE expression:expr OF case_list:cases ESAC
        {: RESULT = new typcase(curr_lineno(), expr, cases); :}
    ;

case_list
    ::= case_clause:c
        {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
    | case_list:cl case_clause:c
        {: RESULT = cl.appendElement(c); :}
    ;

case_clause
    ::= OBJECTID:name COLON TYPEID:type_decl DARROW expression:expr SEMI
        {: RESULT = new branch(curr_lineno(), name, type_decl, expr); :}
    ;

expression_list
    ::= expression:e SEMI
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | expression_list:el expression:e SEMI
        {: RESULT = el.appendElement(e); :}
    ;

expression
    ::= OBJECTID:name ASSIGN expression:expr
        {: RESULT = new assign(curr_lineno(), name, expr); :}
    
    | function_call:fc
        {: RESULT = fc; :}
    
    | IF expression:pred THEN expression:then_exp ELSE expression:else_exp FI
        {: RESULT = new cond(curr_lineno(), pred, then_exp, else_exp); :}
    
    | WHILE expression:pred LOOP expression:body POOL
        {: RESULT = new loop(curr_lineno(), pred, body); :}
    
    | LBRACE expression_list:body RBRACE
        {: RESULT = new block(curr_lineno(), body); :}
    
    | let_expression:expr
        {: RESULT = expr; :}
    
    | case_expression:expr
        {: RESULT = expr; :}
    
    | NEW TYPEID:type_name
        {: RESULT = new new_(curr_lineno(), type_name); :}
    
    | ISVOID expression:e1
        {: RESULT = new isvoid(curr_lineno(), e1); :}
    
    | expression:e1 PLUS expression:e2
        {: RESULT = new plus(curr_lineno(), e1, e2); :}
    
    | expression:e1 MINUS expression:e2
        {: RESULT = new sub(curr_lineno(), e1, e2); :}
    
    | expression:e1 MULT expression:e2
        {: RESULT = new mul(curr_lineno(), e1, e2); :}
    
    | expression:e1 DIV expression:e2
        {: RESULT = new divide(curr_lineno(), e1, e2); :}
    
    | NOT expression:e1
        {: RESULT = new comp(curr_lineno(), e1); :}
    
    | expression:e1 LT expression:e2
        {: RESULT = new lt(curr_lineno(), e1, e2); :}
    
    | expression:e1 LE expression:e2
        {: RESULT = new leq(curr_lineno(), e1, e2); :}
    
    | expression:e1 EQ expression:e2
        {: RESULT = new eq(curr_lineno(), e1, e2); :}
    
    | NEG expression:e1
        {: RESULT = new neg(curr_lineno(), e1); :}
    
    | LPAREN expression:expr RPAREN
        {: RESULT = expr; :}
    
    | OBJECTID:name
        {: RESULT = new object(curr_lineno(), name); :}
    
    | INT_CONST:token
        {: RESULT = new int_const(curr_lineno(), token); :}
    
    | STR_CONST:token
        {: RESULT = new string_const(curr_lineno(), token); :}
    
    | BOOL_CONST:val
        {: RESULT = new bool_const(curr_lineno(), val); :}
    
    | error
    ;

